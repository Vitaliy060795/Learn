КЛАСС OBJECT --Tostring/GetHashCOd,GetType,Eyals
AR--Arkit,вуфория,аркот
Паттерн ФЛАЙВЕД-разделяет обьекты на куче от экземпляров.
СИНГИЛТОН- использование класса которые имеет статическую ссылку на самого себя.
КЛАСС--конструкция языка в котором основными концепциями является понятие обьектов и классов.
ОБЬЕКТЫ хранят в себе статические поля и методы.Экземпляры-нестатические.
(byte, sbyte, char, short, ushort, int, uint, long, ulong)
ТИПЫ ЗНАЧЕНИЙ-Целочисленный,плавающей точкой,Decimal,bool,enum,структуры.(не могут быть null)
ССЫЛОЧНЫЕ ТИПЫ-тип object,string,class,interface,delegat
СТЕК--структура данных которая растет снизу вверх,каждый новый элемент поверх предидущего.в ней находятся типы значений
КУча - в ней реализована динамически распределяема память приложения.Ссылочные типы хранятся в куче.
При создание обьекта ссылочного типа в стеке помещается ссылка на адресс в куче

ИНКАПСУЛЯЦИЯ--сокрытие реализации,это-использование модификаторов доступа,приведения к базовому типу,свойств и автосвойств.

НАССЛЕДОВАНИЕ - передача открытого или защищенного типа(Protected) от базового класса к производным;
Если в базовом классе есть конструкторы с параметрами,то в производном мы должны его реализовать .
Применяет ключевое слово base для вызова конструктора;
Нелязя унаследоватся от статического класса.sealed;

ПОЛИМОРФИЗМ -это возможность обьектов с одинаковой спецификацией,иметь различную реализацию
2 разновидности ЭДХОК(замещение,для сокрытия членов класса применяется ключевое слово new) и классический полиморфизм
использование виртуальных методов и второе это Upcast  и DownCast;  sealed;

АБСТРАКЦИЯ-абстрактный класс это 
базовый класс который мы можем только наследовать и они могут иметь как абстрактные так и не абстрактные
члены в отличие от интерфейсов,можем создавать конструкции.
Создавать абстрактные методы,можно только в абстрактных классах и его тело должно отстуствовать, а реализация в 
производном классе при помощи овверрайдnnnnnnnnn
Если абстрактный класс наследуется от абстрактного,то в производном не обьязательна реализация.
СТАТИЧЕСКИЕ члены не могут быть виртуальными и абстрактными,но в абстрактных классах могут быть статич члены

Сигнатура это--имя метода, параметр который принимает,порядок параметров и количество.

ИНТЕРФЕЙСЫ--контракт что какой то тип реализует его функционал,набор сигнатур и методов
в нем запрещена реализация,Класс или структура должны реализовать весь интерфейс
Может соержать абстрактные члены-- методы,свойства,события,индексаторы
Невозможно создать экземпляр интерфейса
интерфейсы не могут определять статические члены, переменные, константы.
Можно наследоватся от множества интерфейсов.
Можно не реализовывать ,если сделаем их абстрактными.
Могут быть обобщенными,также при реализации интерфейса мы можем явным образом указать, какой тип будет использоваться для параметра T:
интерфейсы могут использовать ключевое слово new для сокрытия методов из базового интерфейса

СТРУКТУРЫ--конструкция языка,содержащая набор полей различных типов,их нельзя инициализировать в месте создания.
Можно вызывать без вызова конструктора.
Класс является ссылочным типом, а структура значимым, как следствие поля структуры не могут быть null.
НЕЛЬЗЯ задавать конструкторы по умолчанию,он есть неявно.
ЕСЛИ имеется конструктор,все поля нужно проинициализировать.Структура Не может быть статическая,но может
содержать члены статик и не может содержать модификатор протектед.
От структур не можем наследоватся,могут только реализовать интерфейсы

ДЕЛЕГАТЫ -специальный обьект (чемданчик)который хранит в себе указатель на методы.
Наследуется от мултикаст делегат,который наследуется от делегата.Мултикаст дает возможность
вызывать более одного метода.Для делешатов используются события.
СОБЫТИЯ-сигнализируют системе о том, что произошло определенное действие.
Каждое событие должно представлять определенный делегат.
События объявляются в классе с помощью ключевого слова event, после которого идет название делегата:
Связь с делегатом означает, что метод, должен принимать те же параметры, что и делегат, и возвращать тот же тип, что и делегат.
Делегаты могут быть Genericami,параметризированными.

ИНДЕКСАТОР-это индексируемое свойство.Позволяет безопасно работать с массивами
КОВАРИАНТНОСТЬ-это неявный UPCAST всех элементов массива.
Контравариантность: позволяет использовать более универсальный тип, чем заданный изначально
Инвариантность: позволяет использовать только заданный тип
СТАТИЧЕСКАЯ переменная --общая переменная которая создается для всех экземпляров.
С НЕСТАТИЧЕСКИХ СВОЙСТВ,МЕТОДОВ МОЖНО ОБРАЩАТСЯ К СТАТИЧЕСКИМ ЧЛЕНАМ,А С СТАТИЧ  НЕЛЬЗЯ

КОНСТАНТЫ--не могут быть статические,относится к типу ,а не экземпляру,должна быть проиницилизована сразу,

СТАТИЧЕСКИЙ КОНСТРУКТОР--вызывается напрямую и в первую очередь,пользователель не управляет когда статический
конструктор выполнится
ЕСЛИ  класс содержит статич поля,должен быть статич конструктор ,который инициализирует эти поляъ
Статический методы можно перегружать
Статические члены поддерживают замещение

СТАТИЧЕСКИЙ КЛАСС--содержит только статич члены,нельзя создавать экземпляр класса
Наследуется от обжект и нельяз унаследоваться от другого класса и не реализует интерфейсы
НЕ содержит статич конструкторов

Рассширяющие методы Static--this-аргумент расширения

BOXING-преобразование структурного типа в ссылочный тип
UNBOXING-преобразование ссылочного в структурный

ПЕРЕЧИСЛЕНИЕ ENUM-конструкция яхыка содержащая целочисленные типы,содержит набор именнованых констант,
которые хранят в себе определенное значение,относится к категории структурных 
типов.По умолчанию будет тип инт.

ПО ССЫЛКЕ И ПО ЗНАЧЕНИЮ.припередачи по значение --метод получает копию,а по ссылке адресс переменной в памяти,
если в методе меняется значение параметра по ссылке ,то изменяется значение переменной.
REF- входной,пишется как при создании так и при обьявлении
OUT-выходной,пишется как при создании так и при обьявлении,не нужна инициализация.

Универсальные типы,обобщенные ,параметризированные классы,методы,свойства,поля
параметры вписываются в угловых скобках
инстанцируем члены этого класса ,и закрываем его каким то типом.
Один обобщенный класс может быть унаследован от другого обобщенного

Корутины в Unity — простой и удобный способ запускать функции, которые должны работать параллельно в течение некоторого времени.
возвращают IEnumerator и использующие ключевое слово yield.

ПОТОКИ.Это мнозадачность,делится на 2 типа:
1на основе процессов-позволяет выполнить более одной программы в контексте операционной системы.
2на основе потоков-процесс решает более одной задачи одновременно,параллельное выполнение отдельных частей программы.
пространство имен System.threading для работы с потоками,содержит классы:
THread,treadStart,ParameterizedTreadStart,Monitor
Чтобы нам запустить паралельный поток,нам нужно создать метод,для этого метода сообщаем делегатом ThreadStart,это без
параметов,с параметрами ParameterizedTreadStart,создаем составление потока и конфигурируем с делегатоми вызываем при помощи старт.
Синхронные и асинхронные вызовы потоков.
Синхронные -когда мы вызываем в основном потоке,первичном.
Асинхронные - в контексте вторичного потока.
можно вызывать одновременно.
МНОГОЗАДАЧНОСТЬ--свойство операционной системы или среды программирования обрабатывать параллельно несколько процессов.

Коллекция-некий обьект который содержит однотипные элементы


Классы могут быть частичными(partial).Частичные методы (parial) не могут возвращать значения, то есть они всегда имеют тип void. И также они не могут иметь out-параметров.



















